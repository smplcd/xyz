$title: Simple Coder's Lair
$description: home of a simple coder, feel free to stay a while
$style:
    <style>
    a.external:after {
        content: "â†—";
    }
    </style>
[home]
    # smplcd

    Welcome to my little corner of the internet! I'm an inhabitant of **Earth**, currently residing in the Frozen Wastelands of North America. My quest is the **understading** of the universe through the mastery of **mathematics** and **computer science**; although I am terrible at both currently.

    I have professional experience in back-end engineering with `.py`, `.docker`, `k8s`, `.sql`, and other back-end stuffs. But don't ask me about those, I don't want to remember.

    Currently reading `kANDr2` to learn `.c`.

    [notes]
        &nbsp;
        [how NASA writes space-proof code]
            ###### 206.2023
            ### 1. Simple Control Flow
            Don't use `goto`, `setjmp`, `longjmp`, `recursion`. Recursion creates hard to follow cyclic code control graphs
            ### 2. Limit All Loops
            Hard limit the number of iterations in all loops, otherwise it can lead to runaway code
            ```git
             int list search(list_t *e, int search) {
            +    int i = 0;
            +    while (e && i++ < MAX_ITER) {
            -    while (e) {
                     if (e->val == search)
                         return e;
                     e = e->fd;
                 }
                 return null;
             }
            ```
            ### 3. Don't Use the Heap
            Only use stack memory, never `malloc` or `free`. A memorable amount of the memory bugs come from using the heap. Memory use becomes deterministic.
            ```c
            typedef struct {
                int in_use;
                char data[DATA_SIZE];
            } msg_t

            void msg_task() {
                msg_t msg_buf[NUM_MSG] = {0};
                msg_process(msg_buf);
                ...
                return;
            }
            ```
            ### 4. Limit Function Size
            - Function should be no longer than 60 lines;
            - Functions should do one thing;
            - Easy to read and understand and to test.

            ### 5. Practice Data Hiding
            Declare variables in the lowest scope required.
            ### 6. Check Return Values
            Explicitly cast all ignored return values to a void type. It shows that you use the function in its intended purpose.
            ### 7. Limit the Preprocessor
            Limit the use of the C preprocessor to file inclusions and very simple conditional macros. Don't use too many conditional compilation otherwise the code becomes hard to scale and hard to test.

            "The C preprocessor is a powerful obfuscation tool that can destroy code clarity and befuddle many text-based checkers."
            ### 8. Restrict Pointers Use
            Pointers should not be able to be dereferenced more than one layer at a time, since it's easy to use incorrectly. Also, don't use function pointers since they obfuscate the code control flow graph of the program.
            ### 9. Be Pedantic
            Compile with all warnings enabled and in pedantic mode `gcc -Wall -Werror -Wpedantic`, analyze the code with multiple static code analyzers with different rulesets, and unit test the code.

            source: [Low Level Learner](https://yewtu.be/watch?v=GWYhtksrmhE)

    [posts]
        &nbsp;
        [inauguration]
            ###### 205.2023
            I have spent over 12 hours, trying to make a simple yet refined front end for a compedium of my projects, thoughts, and experiences to no avail. And that's when I serendipitously came across `imml`.

            A no fuss `.md` to `.html` program with a live editor, almost perfect. Sadly there are 2 issues.
            - it's written in the god awful language of `.js` because of the live editor;
            - everything is contained within a single markdown file.
            
            For now this isn't an issue, but once more and more is written, it'll quickly get out of hands and difficult to manage. And I do aim for simplicity after all. There's also a few things I'd like to be different but this is neither here nor there.

            As it stands currently, this is the most styling I'll be bringing to the website. I don't particularly enjoy 'coding' websites, and I have a general distaste for the web in its current incarnation.

            If I don't forget that this exists, there should be updates at least monthly!
    [neat links]
        &nbsp;

        | Name                  | What                 
        | --------------------- | ---------------------
        | [4get](https://4get.ca) | metasearch engine
        | [suckless](https://suckless.org/) | collective
        | [xxiivv](https://wiki.xxiivv.com/site/stack.html) | wiki
        | [i330](https://i330.dev/) | personal blog
        | [codemadness](https://codemadness.org/) | personal blog
		| [wr: xxiivv](https://webring.xxiivv.com/) | webring
		| [grug](https://grugbrain.dev/) | guide
        
    ---
    Made using [imml](https://github.com/leoncvlt/imml)
